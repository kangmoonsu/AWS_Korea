- vbox (CentOS7-webserver)
* HTTPD(Hyper Text Transfer Protocol Daemon; 웹서버 구축 및 간단 홈페이지 꾸미기) - AWS Linux (apache, nginx), WIN (IIS:Internet Information Services)
HTTP는 HTML 문서와 같은 리소스들을 가져올 수 있도록 해주는 프로토콜입니다. HTTP는 웹에서 이루어지는 모든 데이터 교환의 기초이며, 클라이언트-서버 프로토콜이기도 합니다. 클라이언트-서버 프로토콜이란 (보통 웹브라우저인) 수신자 측에 의해 요청이 초기화되는 프로토콜을 의미합니다. 하나의 완전한 문서는 텍스트, 레이아웃 설명, 이미지, 비디오, 스크립트 등 불러온(fetched) 하위 문서들로 재구성됩니다.

# yum install -y httpd
# systemctl start httpd
# systemctl enable httpd
# systemctl enable --now httpd
# systemctl status httpd
# exit // 세션 종료
# yum install -y bash-completion // 자동 완성 기능 설치

# systemctl status firewalld
# firewall-cmd --get-active-zone
# firewall-cmd --zone=public --list-all
# firewall-cmd --permanent --add-service=http
# firewall-cmd --permanent --add-port=80/tcp
# firewall-cmd --permanent --remove-service=http
# firewall-cmd --permanent --remove-port=80/tcp
# firewall-cmd --reload
# cd /var/www/html
# mkdir images && cd $_
# wget http://192.168.56.1/FILES/two-rabbit.jpg
# cd ..
# vi index.html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Sample Deployment</title>
  <style>
    body {
      color: #ffffff;
      background-color: #0188cc;
      font-family: Arial, sans-serif;
      font-size: 14px;
    }
    h1 {
      font-size: 500%;
      font-weight: normal;
      margin-bottom: 0;
    }
    h2 {
      font-size: 200%;
      font-weight: normal;
      margin-bottom: 0;
    }
  </style>
</head>
<body>
  <div align="center">
    <h1>Congratulations</h1>
    <h2>This application was deployed using AWS ECS, EKS.</h2>
    <p>For next steps, read the <a href="https://aws.amazon.com/ko">AWS Management Console.</a></p>
    <p><img src="images/two-rabbit.jpg" alt="두마리 토끼" height="350"></p>
  </div>
</body>
</html>

- vmware (Ubuntu16-dbserver)
* MariaDB는 오픈 소스의 관계형 데이터베이스 관리 시스템(RDBMS)입니다. MySQL과 동일한 소스 코드를 기반으로 하며, GPL v2 라이선스를 따릅니다. 오라클 소유의 현재 불확실한 MySQL의 라이선스 상태에 반발하여 만들어졌습니다.

$ sudo apt update
$ sudo apt -y install mariadb-server nfs-common
$ sudo mysql_secure_installation
$ sudo vi /etc/mysql/mariadb.conf.d/50-server.cnf
#bind-address            = 127.0.0.1

$ sudo systemctl restart mysql

$ sudo mysql -u root -p
CREATE USER 'wpuser'@'%' IDENTIFIED BY 'wppass';
CREATE DATABASE IF NOT EXISTS wordpress;
GRANT ALL PRIVILEGES ON wordpress.* TO 'wpuser'@'%';
quit

- wordpress (web, db 연동)
* 워드프레스(WordPress)는 웹사이트 및 블로그를 만들기 위한 오픈 소스 컨텐츠 관리 시스템(CMS)입니다. 워드프레스는 PHP 언어로 작성되어 있으며, MySQL 데이터베이스를 사용하여 웹사이트의 콘텐츠를 관리합니다.

# yum install -y httpd php php-mysql php-gd php-mbstring wget unzip mysql
# cd /tmp
# wget https://ko.wordpress.org/wordpress-4.8.2-ko_KR.zip
# curl https://ko.wordpress.org/wordpress-4.8.2-ko_KR.zip -o wordpress-4.8.2-ko_KR.zip
# cd /var/www/html
# unzip /tmp/wordpress-4.8.2-ko_KR.zipl
# chown -R apache:apache ./wordpress
# systemctl restart httpd
# sestatus
# setenforce 0
# vi /etc/sysconfig/selinux
SELINUX=disabled

- ESXi 가상서버 및 가상 네트워크 구축
* SSHD(Secure Shell Daemon; KeyPair 생성 및 활용) : 키 쌍은 특정 인증 프로토콜에 사용되는 공개(Public) 키(자물쇠-서버) 및 프라이빗(Private; *.pem) 키(열쇠-개인 폴더) 파일을 나타냅니다.
SSH 공개 키 인증은 비동기 암호화 알고리즘을 사용하여 "프라이빗" 키와 "공개" 키라는 두 가지 키 파일을 생성합니다. 프라이빗 키 파일은 암호와 동일하며, 모든 상황에서 보호되어야 합니다. 다른 사람이 사용자의 프라이빗 키를 획득하면 사용자가 액세스할 수 있는 모든 SSH 서버에 사용자의 이름으로 로그인할 수 있습니다.

scp two-rabbit.jpg root@172.25.0.131:/root/

scp -i .ssh/id_rsa two-rabbit.jpg root@172.25.0.131:/root/

scp -i .ssh/id_rsa aws.tar root@172.25.0.131:/tmp/

# ssh-keygen -t rsa
# ssh-copy-id -i .ssh/id_rsa root@172.25.0.131
# ssh root@192.168.0.42
# vi /etc/ssh/sshd_config
PasswordAuthentication no

# systemctl restart sshd

* Router (IP 공유기)
네트워크 주소 변환(NAT; Network Address Translation)은 컴퓨터 네트워킹에서 쓰이는 용어로서, IP 패킷의 TCP/UDP 포트 숫자와 소스 및 목적지의 IP 주소 등을 재기록하면서 라우터를 통해 네트워크 트래픽을 주고 받는 기술을 말합니다. NAT를 이용하는 이유는 대개 사설 네트워크에 속한 여러 개의 호스트가 하나의 공인 IP 주소를 사용하여 인터넷에 접속하기 위함입니다. 많은 네트워크 관리자들이 NAT를 편리한 기법이라고 보고 널리 사용하고 있습니다.
공인IP = Public IP
사설IP = Private IP
10.0.0.0 ~ 10.255.255.255
172.16.0.0 ~ 172.31.255.255
192.168.0.0 ~ 192.168.255.255

나의 네트워크(VMware Pro NAT)
Public Subnet(EXT) - 외부
172.25.0.0/24
172.25.0.0 ~ 192.168.0.255 (256개 IP - 2개 = 254개)
172.25.0.0   네트워크 주소(시작 IP)
172.25.0.255 브로드캐스팅 주소(마지막 IP)

- Router

Private Subnet(INT) - 내부 - 격리 네트워크 - isolated network - 정보자산 DBMS 위치하려고 구축
10.25.0.0/24
10.25.0.0 ~ 172.16.0.255 (256개 IP - 2개 = 254개)
10.25.0.0   네트워크 주소(시작 IP)
10.25.0.255 브로드캐스팅 주소(마지막 IP)

# hostnamectl set-hostname router
# vi /etc/hosts
172.25.0.130 router

# dG vi편집기 전체 삭제 명령어
# vi /etc/sysconfig/network-scripts/ifcfg-ens192
TYPE=Ethernet
BOOTPROTO=none
NAME=ens192
DEVICE=ens192
ONBOOT=yes
IPADDR=172.25.0.131
NETMASK=255.255.255.0
GATEWAY=172.25.0.2
DNS1=8.8.8.8
DNS2=8.8.4.4

# vi /etc/sysconfig/network-scripts/ifcfg-ens224
TYPE=Ethernet
BOOTPROTO=none
NAME=ens224
DEVICE=ens224
ONBOOT=yes
IPADDR=10.25.0.1
NETMASK=255.255.255.0

# systemctl restart network
# firewall-cmd --get-active-zone
public
  interfaces: ens192 ens224
# nmcli c mod ens192 connection.zone external // nm : network manager
# nmcli c mod ens224 connection.zone internal
# firewall-cmd --get-active-zone
internal
  interfaces: ens224
external
  interfaces: ens192

# sysctl -w net.ipv4.ip_forward=1 # 리눅스 시스템을 라우터로 만드는 셋팅
# sysctl -p # 설정 저장
# cat /proc/sys/net/ipv4/ip_forward
1

* 포트포워딩은 공인 IP 주소로부터 들어오는 웹 트래픽을 내부에 있는 서버로 전달하려면 포트 포워딩을 설정해야 합니다. 웹 서버는 일반적으로 80번 포트를 사용하므로, 공유기 또는 방화벽 설정에서 80번 포트로 들어오는 트래픽을 웹 서버가 있는 내부 IP 주소로 전달하도록 설정할 수 있습니다.

# firewall-cmd --permanent --zone=external --add-forward-port=port=8080:proto=tcp:toport=80:toaddr=10.25.0.100
# firewall-cmd --reload

# firewall-cmd --permanent --zone=external --add-forward-port=port=2200:proto=tcp:toport=22:toaddr=10.25.0.100
# firewall-cmd --reload

# firewall-cmd --list-all --zone=external

* 동적 호스트 구성 프로토콜(Dynamic Host Configuration Protocol, DHCP)은 호스트 IP 구성 관리를 단순화하는 IP 표준입니다. 동적 호스트 구성 프로토콜 표준에서는 DHCP 서버를 사용하여 IP 주소 및 관련된 기타 구성 세부 정보를 네트워크의 DHCP 사용 클라이언트에게 동적으로 할당하는 방법을 제공합니다.

# yum install dhcp -y
# vi /etc/dhcp/dhcpd.conf
ddns-update-style interim;
subnet 10.25.0.0 netmask 255.255.255.0 {
# = 10.25.0.0/24
option routers 10.25.0.1;
option subnet-mask 255.255.255.0;
range dynamic-bootp 10.25.0.100 10.25.0.110;
option domain-name-servers 8.8.8.8, 8.8.4.4;
default-lease-time 7200;
max-lease-time 86400;
}

# systemctl enable dhcpd
# systemctl start dhcpd
# systemctl enable --now dhcpd

* 도메인 네임 시스템(Domain Name System, DNS)은 호스트의 도메인 이름을 호스트의 네트워크 주소로 바꾸거나 그 반대의 변환을 수행할 수 있도록 하기 위해 개발되었습니다. 특정 컴퓨터(또는 네트워크로 연결된 임의의 장치)의 주소를 찾기 위해, 사람이 이해하기 쉬운 도메인 이름을 숫자로 된 식별 번호(IP 주소)로 변환해 줍니다. 도메인 네임 시스템은 흔히 "전화번호부"에 비유됩니다. 인터넷 도메인 주소 체계로서 TCP/IP의 응용에서, www.example.com과 같은 주 컴퓨터의 도메인 이름을 192.168.1.0과 같은 IP 주소로 변환하고 라우팅 정보를 제공하는 분산형 데이터베이스 시스템입니다.

# yum -y install bind bind-chroot bind-utils
ggdG

# vi /etc/named.conf

options {
        listen-on port 53 { 127.0.0.1; 10.25.0/24; 172.25.0/24; };
        listen-on-v6 port 53 { ::1; };
        directory       "/var/named";
        dump-file       "/var/named/data/cache_dump.db";
        statistics-file "/var/named/data/named_stats.txt";
        memstatistics-file "/var/named/data/named_mem_stats.txt";
        recursing-file  "/var/named/data/named.recursing";
        secroots-file   "/var/named/data/named.secroots";
        allow-query     { localhost; 10.25.0/24; 172.25.0/24; };
        forwarders { 8.8.8.8; 8.8.4.4; };

        recursion yes;

        dnssec-enable yes;
        dnssec-validation yes;

        /* Path to ISC DLV key */
        bindkeys-file "/etc/named.iscdlv.key";

        managed-keys-directory "/var/named/dynamic";

        pid-file "/run/named/named.pid";
        session-keyfile "/run/named/session.key";
};

logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
};
view "internal" {
        zone "." IN {
                type hint;
                file "named.ca";
        };

        include "/etc/named.rfc1912.zones";
        include "/var/named/devplace.shop.zones"; # 호스팅 영역 생성
};

# vi /var/named/devplace.shop.zones
zone "devplace.shop" IN {
        type master;
        file "devplace.shop.db";
        allow-update { none; };
};

zone "0.25.10.in-addr.arpa" IN {
        type master;
        file "0.25.10.in-addr.arpa.db";
        allow-update { none; };
};

# vi /var/named/devplace.shop.db
$TTL    86400
@       IN      SOA     devplace.shop.   root.devplace.shop.(
                        2022041401 ; Serial
                        3h         ; Refresh
                        1h         ; Retry
                        1w         ; Expire
                        1h )       ; Minimum

        IN      NS      ns.devplace.shop.
        IN      MX 10   ns.devplace.shop.
ns      IN      A       10.25.0.101
web1    IN      A       10.25.0.100


# vi /var/named/0.25.10.in-addr.arpa.db
$TTL	86400
@	IN	SOA	devplace.shop.	root.devplace.shop.(
			2022041401 ; Serial
			3h         ; Refresh
			1h         ; Retry
			1w         ; Expire
                        1h )       ; Minimum

	IN	NS	ns.devplace.shop.
101	IN	PTR	ns.devplace.shop.

# systemctl start named && systemctl enable named

# systemctl enable --now named

systemctl disable --now httpd


# firewall-cmd --permanent --add-service=dns
# firewall-cmd --reload

# systemctl restart NetworkManager

* 대표적인 레코드
SOA  : 다루는 도메인 버전과 업데이트 시간 간격 등의 정보를 저장하는 레코드
A    : 호스트 이름으로 IPv4 주소를 조회할 때 사용하는 레코드
       예: 호스트 ns.devplace.shop의 IPv4 주소는 172.16.0.130
AAAA : 호스트 이름으로 IPv6 주소를 조회할 때 사용하는 레코드
       예: jprs.jp의 IPv6 주소는 2001:218:3001:7::80
PTR  : IP 주소로 호스트 이름을 조회할 때 사용하는 레코드
       예: 172.16.0.130의 호스트 이름은 ns.devplace.shop
NS   : DNS 서버의 호스트 이름 혹은 IP 주소를 저장하는 레코드
       예: devplace.shop의 DNS 서버는 ns.devplace.shop
MX   : 메일 서버 호스트 이름 혹은 IP 주소를 저장하는 레코드
       예: devplace.shop의 메일 서버는 mail.devplace.shop
CNAME: 호스트 이름의 별칭을 저장하는 레코드
       예: www.devplace.shop은 ns.devplace.shop의 별칭(alias)

# yum install -y bind-utils
dig A web01.devplace.shop
dig -x 172.16.0.102

* HAProxy는 여러 서버에 요청을 분산시키는 TCP 및 HTTP 기반 애플리케이션을 위한 고가용성 로드 밸런서 및 역방향 프록시를 제공하는 무료 오픈 소스 소프트웨어 입니다. C로 작성되었으며 빠르고 효율적(프로세서 및 메모리 사용 측면에서)으로 유명합니다.

# vi /etc/haproxy/haproxy.cfg
global
    daemon

defaults
    mode               http

frontend  http-in
    bind *:80
    default_backend    backend_servers

backend backend_servers
    balance            roundrobin
    server             web01 172.16.0.101:80 cookie w1 check
    server             web02 172.16.0.100:80 cookie w2 check
    server             web03 172.16.0.103:80 cookie w3 check

# systemctl start haproxy
# systemctl enable haproxy
# systemctl enable --now haproxy

* 서버 메시지 블록(Server Message Block, SMB)은 도스나 윈도우에서 파일이나 디렉터리 및 주변 장치들을 공유하는데 사용되는 메시지 형식입니다. NetBIOS는 SMB 형식에 기반을 두고 있으며, 많은 네트워크 제품들도 SMB를 사용합니다. 이러한 SMB 기반의 네트워크에는 랜매니저, 윈도우 포 워크그룹(Windows for Workgroups), 윈도우 NT, 그리고 랜 서버(Lan Server) 등이 있습니다. 서로 다른 운영 체제 사이에 파일을 공유할 수 있도록 하기 위해 SMB를 사용하는 제품들도 많이 있습니다. 그 중 하나가 삼바인데, 유닉스와 윈도우 컴퓨터들간에 디렉터리와 파일을 공유할 수 있게 합니다.

> 서버
# yum install -y samba
# mkdir -p /var/samba/share
# chmod 777 /var/samba/share
# adduser kosa
# passwd kosa
# smbpasswd -a kosa
# vi /etc/samba/smb.conf
        workgroup = hali
[share]
        comment = Share Directory
        path = /var/samba/share
        browserable = yes
        writable = yes
        valid users = kosa
        create mask = 0777
        directory mask = 0777

# systemctl start smb
# systemctl enable smb
# systemctl enable --now smb

# systemctl start nmb
# systemctl enable nmb
# systemctl enable --now nmb

# firewall-cmd --permanent --add-service=samba
# firewall-cmd --reload

> 윈도우 클라이언트 접속 방법
\\192.168.56.120

> CentOS7 클라이언트 접속 방법
# yum install -y samba-client
# smbclient //192.168.56.120/share -U kosa

* 네트워크 파일 시스템(Network File System, NFS)은 1984년에 썬 마이크로시스템즈가 개발한 프로토콜입니다. 클라이언트 컴퓨터의 사용자가 네트워크 상의 파일을 직접 연결된 스토리지에 접근하는 방식과 비슷한 방식으로 접근하도록 도와 줍니다. 다른 수많은 프로토콜과 마찬가지로 ONC RPC 시스템을 기반으로 합니다. 네트워크 파일 시스템은 RFC에 정의된 오픈 표준이므로 누구나 구현할 수 있습니다.(윈도우10 접속 가능)

> 서버
# yum install -y nfs-utils
# mkdir /share && cd $_
# echo "Hello" > test.txt
# vi /etc/exports
/share 192.168.56.0/24(rw,sync)

# chmod 707 /share
# systemctl start nfs-server
# systemctl enable nfs-server
# systemctl enable --now nfs-server
# exportfs -v
# firewall-cmd --permanent --add-service=nfs
# firewall-cmd --permanent --add-service=rpc-bind
# firewall-cmd --permanent --add-service=mountd
# firewall-cmd --reload

> 클라이언트
# rpm -qa | grep nfs-utils
# yum install -y nfs-utils
# showmount -e 172.16.0.100
# mkdir share
# mount -t nfs 172.16.0.100:/share /mnt
# df -h
# vi /etc/fstab
192.168.56.120:/share /root/share nfs defaults 0 0

* DBMS(데이터베이스 관리 시스템)은 데이터베이스를 정의하고 생성하며 데이터를 저장, 검색, 업데이트 및 관리하는 소프트웨어 시스템입니다. 이는 데이터베이스를 효과적으로 구성하고 조직하여 데이터에 대한 효율적인 액세스를 제공하고, 데이터의 무결성과 보안을 유지하는 데 도움이 됩니다.

> 서버
repo = repository
# vi /etc/yum.repos.d/MariaDB.repo
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/10.4/centos7-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1

# yum install -y MariaDB
# rpm -qa | grep MariaDB
# mariadb --version
# systemctl start mariadb
# systemctl enable mariadb
# systemctl enable --now mariadb
# mysql_secure_installation
# systemctl restart mariadb
# mysql -u root -p
CREATE USER 'wpuser'@'%' IDENTIFIED BY 'wppass';
CREATE DATABASE IF NOT EXISTS wordpress;
GRANT ALL PRIVILEGES ON wordpress.* TO 'wpuser'@'%';
quit

# firewall-cmd --permanent --add-service=mysql
# firewall-cmd --reload

> 클라이언트
# yum install mysql -y
# mysql -h 192.168.56.120 -u wpuser -p

* FTP(파일 전송 프로토콜)는 컴퓨터 네트워크를 통해 파일을 전송하기 위한 표준 프로토콜 중 하나입니다. FTP는 클라이언트-서버 모델을 기반으로 하며, 클라이언트는 파일을 업로드하거나 다운로드하기 위해 서버에 접속합니다.

# yum -y install vsftpd
# vi /etc/vsftpd/vsftpd.conf
anonymous_enable=NO
ascii_upload_enable=YES
ascii_download_enable=YES
chroot_local_user=YES
chroot_list_enable=YES
chroot_list_file=/etc/vsftpd/chroot_list
ls_recurse_enable=YES
listen=YES
listen_ipv6=NO
# add follows to the end
local_root=public_html
use_localtime=YES
seccomp_sandbox=NO

# vi /etc/vsftpd/chroot_list
cent

# systemctl start vsftpd
# systemctl enable vsftpd
# firewall-cmd --add-service=ftp --permanent
# firewall-cmd --reload

- ESXi 모니터링
esxcli system snmp get
esxcli system snmp set -c hali
esxcli system snmp set -e yes

- ESXi 계정잠금해제
Security.AccountLockFailures

- 가상 스토리지 설치
* iSCSI는 "Internet Small Computer System Interface"의 약자로, 컴퓨터와 저장 장치 간의 데이터 전송을 위한 표준화된 프로토콜입니다. iSCSI는 TCP/IP 네트워크를 통해 SCSI 명령을 전송하여 원격 저장 장치에 액세스하는 데 사용됩니다. 이는 기존의 Fibre Channel과 같은 전통적인 스토리지 네트워킹 기술보다 비용이 적게 드는 대안으로 사용됩니다.

> ISCSI 스토리지(iscsitarget)
$ sudo apt update
$ sudo apt install iscsitarget iscsitarget-dkms -y
$ sudo vi /etc/default/iscsitarget
ISCSITARGET_ENABLE=true

$ mkdir ~/storage
$ dd if=/dev/zero of=~/storage/lun20_01.img bs=4096 count=5000000
$ dd if=/dev/zero of=~/storage/lun20_02.img bs=4096 count=5000000

$ sudo vi /etc/iet/ietd.conf
Target iqn.2023.12.org.cccr.sys01
    Lun 1 Path=/home/johnlee/storage/lun20_01.img
    Alias LUN20_01
Target iqn.2023.12.org.cccr.sys02
    Lun 2 Path=/home/johnlee/storage/lun20_02.img
    Alias LUN20_02
$ sudo systemctl restart iscsitarget

> ISCSI 스토리지 접속 테스트
$ sudo apt install open-iscsi -y
$ sudo iscsiadm -m discovery -t st -p 127.0.0.1
$ sudo iscsiadm -m node --targetname "iqn.2023.12.org.cccr.sys01" --portal "127.0.0.1:3260" --login
$ sudo iscsiadm -m node --targetname "iqn.2023.12.org.cccr.sys01" --portal "127.0.0.1:3260" --logout

* 네트워크 파일 시스템(Network File System, NFS)은 1984년에 썬 마이크로시스템즈가 개발한 프로토콜입니다. 클라이언트 컴퓨터의 사용자가 네트워크 상의 파일을 직접 연결된 스토리지에 접근하는 방식과 비슷한 방식으로 접근하도록 도와 줍니다. 다른 수많은 프로토콜과 마찬가지로 ONC RPC 시스템을 기반으로 합니다. 네트워크 파일 시스템은 RFC에 정의된 오픈 표준이므로 누구나 구현할 수 있습니다.(윈도우10 접속 가능)

> 서버
# yum install -y nfs-utils
# mkdir /share && cd $_
# echo "Hello" > test.txt
# vi /etc/exports
/share 192.168.56.0/24(rw,sync)

# chmod 707 /share
# systemctl start nfs-server
# systemctl enable nfs-server
# systemctl enable --now nfs-server
# exportfs -v
# firewall-cmd --permanent --add-service=nfs
# firewall-cmd --permanent --add-service=rpc-bind
# firewall-cmd --permanent --add-service=mountd
# firewall-cmd --reload

> 클라이언트
# rpm -qa | grep nfs-utils
# yum install -y nfs-utils
# showmount -e 172.16.0.100
# mkdir share
# mount -t nfs 172.16.0.100:/share /mnt
# df -h
# vi /etc/fstab
192.168.56.120:/share /root/share nfs defaults 0 0

- vCenter+vSAN
